// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/improbable/spatialos/remoteinteraction/v1alpha1/remoteinteraction.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Improbable.SpatialOS.RemoteInteraction.V1Alpha1 {

  /// <summary>Holder for reflection information generated from proto/improbable/spatialos/remoteinteraction/v1alpha1/remoteinteraction.proto</summary>
  public static partial class RemoteinteractionReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/improbable/spatialos/remoteinteraction/v1alpha1/remoteinteraction.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RemoteinteractionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ck1wcm90by9pbXByb2JhYmxlL3NwYXRpYWxvcy9yZW1vdGVpbnRlcmFjdGlv",
            "bi92MWFscGhhMS9yZW1vdGVpbnRlcmFjdGlvbi5wcm90bxIvaW1wcm9iYWJs",
            "ZS5zcGF0aWFsb3MucmVtb3RlaW50ZXJhY3Rpb24udjFhbHBoYTEaNmdpdGh1",
            "Yi5jb20vbXdpdGtvdy9nby1wcm90by12YWxpZGF0b3JzL3ZhbGlkYXRvci5w",
            "cm90byJtCgpEZXBsb3ltZW50Ei0KDHByb2plY3RfbmFtZRgBIAEoCUIX4t8f",
            "EwoRXlthLXowLTlfXXszLDMyfSQSMAoPZGVwbG95bWVudF9uYW1lGAIgASgJ",
            "Qhfi3x8TChFeW2EtejAtOV9dezMsMzJ9JCK1AgoNQ29tbWFuZFN0YXR1cxJY",
            "CgtzdGF0dXNfY29kZRgBIAEoDjJDLmltcHJvYmFibGUuc3BhdGlhbG9zLnJl",
            "bW90ZWludGVyYWN0aW9uLnYxYWxwaGExLkNvbW1hbmRTdGF0dXMuQ29kZRIP",
            "CgdtZXNzYWdlGAIgASgJIrgBCgRDb2RlEgsKB1VOS05PV04QABIGCgJPSxAB",
            "EhEKDVVOSU1QTEVNRU5URUQQAhISCg5JTlRFUk5BTF9FUlJPUhADEhUKEURF",
            "QURMSU5FX0VYQ0VFREVEEAQSFAoQVEFSR0VUX05PVF9GT1VORBAGEhkKFVRB",
            "UkdFVF9BVVRIT1JJVFlfTE9TVBAHEhUKEVBFUk1JU1NJT05fREVOSUVEEAgS",
            "FQoRQVBQTElDQVRJT05fRVJST1IQCSKhAwoURW50aXR5Q29tbWFuZFJlcXVl",
            "c3QSUwoGdGFyZ2V0GAEgASgLMjsuaW1wcm9iYWJsZS5zcGF0aWFsb3MucmVt",
            "b3RlaW50ZXJhY3Rpb24udjFhbHBoYTEuRGVwbG95bWVudEIG4t8fAiABEjEK",
            "C3dvcmtlcl90eXBlGAIgASgJQhzi3x8YChZeW2EtekEtWjAtOV8tXXszLDEy",
            "OH0kEi8KCXdvcmtlcl9pZBgDIAEoCUIc4t8fGAoWXlthLXpBLVowLTlfLV17",
            "MywxMjh9JBJzChBjb21wb25lbnRfdGFyZ2V0GAQgASgLMlkuaW1wcm9iYWJs",
            "ZS5zcGF0aWFsb3MucmVtb3RlaW50ZXJhY3Rpb24udjFhbHBoYTEuRW50aXR5",
            "Q29tbWFuZFJlcXVlc3QuRW50aXR5Q29tbWFuZFRhcmdldBIQCgZiaW5hcnkY",
            "BSABKAxIABo+ChNFbnRpdHlDb21tYW5kVGFyZ2V0EhEKCWVudGl0eV9pZBgB",
            "IAEoAxIUCgxjb21wb25lbnRfaWQYAiABKAVCCQoHcGF5bG9hZCKFAQoVRW50",
            "aXR5Q29tbWFuZFJlc3BvbnNlEk4KBnN0YXR1cxgBIAEoCzI+LmltcHJvYmFi",
            "bGUuc3BhdGlhbG9zLnJlbW90ZWludGVyYWN0aW9uLnYxYWxwaGExLkNvbW1h",
            "bmRTdGF0dXMSEAoGYmluYXJ5GAIgASgMSABCCgoIcmVzcG9uc2UilQEKFlJl",
            "c2VydmVFbnRpdHlJZFJlcXVlc3QSUwoGdGFyZ2V0GAEgASgLMjsuaW1wcm9i",
            "YWJsZS5zcGF0aWFsb3MucmVtb3RlaW50ZXJhY3Rpb24udjFhbHBoYTEuRGVw",
            "bG95bWVudEIG4t8fAiABEiYKDW51bWJlcl9vZl9pZHMYAiABKAVCD+LfHwsQ",
            "////////////ASJ8ChdSZXNlcnZlRW50aXR5SWRSZXNwb25zZRJOCgZzdGF0",
            "dXMYASABKAsyPi5pbXByb2JhYmxlLnNwYXRpYWxvcy5yZW1vdGVpbnRlcmFj",
            "dGlvbi52MWFscGhhMS5Db21tYW5kU3RhdHVzEhEKCWVudGl0eV9pZBgCIAEo",
            "AyKfAQoTQ3JlYXRlRW50aXR5UmVxdWVzdBJTCgZ0YXJnZXQYASABKAsyOy5p",
            "bXByb2JhYmxlLnNwYXRpYWxvcy5yZW1vdGVpbnRlcmFjdGlvbi52MWFscGhh",
            "MS5EZXBsb3ltZW50Qgbi3x8CIAESEQoJZW50aXR5X2lkGAIgASgDEhAKBmJp",
            "bmFyeRgDIAEoDEgAQg4KDGVudGl0eV9zdGF0ZSJ5ChRDcmVhdGVFbnRpdHlS",
            "ZXNwb25zZRJOCgZzdGF0dXMYASABKAsyPi5pbXByb2JhYmxlLnNwYXRpYWxv",
            "cy5yZW1vdGVpbnRlcmFjdGlvbi52MWFscGhhMS5Db21tYW5kU3RhdHVzEhEK",
            "CWVudGl0eV9pZBgCIAEoAyJ9ChNEZWxldGVFbnRpdHlSZXF1ZXN0ElMKBnRh",
            "cmdldBgBIAEoCzI7LmltcHJvYmFibGUuc3BhdGlhbG9zLnJlbW90ZWludGVy",
            "YWN0aW9uLnYxYWxwaGExLkRlcGxveW1lbnRCBuLfHwIgARIRCgllbnRpdHlf",
            "aWQYAiABKAMiZgoURGVsZXRlRW50aXR5UmVzcG9uc2USTgoGc3RhdHVzGAEg",
            "ASgLMj4uaW1wcm9iYWJsZS5zcGF0aWFsb3MucmVtb3RlaW50ZXJhY3Rpb24u",
            "djFhbHBoYTEuQ29tbWFuZFN0YXR1cyKEAQoSRW50aXR5UXVlcnlSZXF1ZXN0",
            "ElMKBnRhcmdldBgBIAEoCzI7LmltcHJvYmFibGUuc3BhdGlhbG9zLnJlbW90",
            "ZWludGVyYWN0aW9uLnYxYWxwaGExLkRlcGxveW1lbnRCBuLfHwIgARIQCgZi",
            "aW5hcnkYAiABKAxIAEIHCgVxdWVyeSLzAQoTRW50aXR5UXVlcnlSZXNwb25z",
            "ZRJOCgZzdGF0dXMYASABKAsyPi5pbXByb2JhYmxlLnNwYXRpYWxvcy5yZW1v",
            "dGVpbnRlcmFjdGlvbi52MWFscGhhMS5Db21tYW5kU3RhdHVzElsKBnJlc3Vs",
            "dBgCIAMoCzJLLmltcHJvYmFibGUuc3BhdGlhbG9zLnJlbW90ZWludGVyYWN0",
            "aW9uLnYxYWxwaGExLkVudGl0eVF1ZXJ5UmVzcG9uc2UuRW50aXR5Gi8KBkVu",
            "dGl0eRIKCgJpZBgBIAEoAxIQCgZiaW5hcnkYAiABKAxIAEIHCgVzdGF0ZTK5",
            "BgoYUmVtb3RlSW50ZXJhY3Rpb25TZXJ2aWNlEp4BCg1FbnRpdHlDb21tYW5k",
            "EkUuaW1wcm9iYWJsZS5zcGF0aWFsb3MucmVtb3RlaW50ZXJhY3Rpb24udjFh",
            "bHBoYTEuRW50aXR5Q29tbWFuZFJlcXVlc3QaRi5pbXByb2JhYmxlLnNwYXRp",
            "YWxvcy5yZW1vdGVpbnRlcmFjdGlvbi52MWFscGhhMS5FbnRpdHlDb21tYW5k",
            "UmVzcG9uc2USpAEKD1Jlc2VydmVFbnRpdHlJZBJHLmltcHJvYmFibGUuc3Bh",
            "dGlhbG9zLnJlbW90ZWludGVyYWN0aW9uLnYxYWxwaGExLlJlc2VydmVFbnRp",
            "dHlJZFJlcXVlc3QaSC5pbXByb2JhYmxlLnNwYXRpYWxvcy5yZW1vdGVpbnRl",
            "cmFjdGlvbi52MWFscGhhMS5SZXNlcnZlRW50aXR5SWRSZXNwb25zZRKbAQoM",
            "Q3JlYXRlRW50aXR5EkQuaW1wcm9iYWJsZS5zcGF0aWFsb3MucmVtb3RlaW50",
            "ZXJhY3Rpb24udjFhbHBoYTEuQ3JlYXRlRW50aXR5UmVxdWVzdBpFLmltcHJv",
            "YmFibGUuc3BhdGlhbG9zLnJlbW90ZWludGVyYWN0aW9uLnYxYWxwaGExLkNy",
            "ZWF0ZUVudGl0eVJlc3BvbnNlEpsBCgxEZWxldGVFbnRpdHkSRC5pbXByb2Jh",
            "YmxlLnNwYXRpYWxvcy5yZW1vdGVpbnRlcmFjdGlvbi52MWFscGhhMS5EZWxl",
            "dGVFbnRpdHlSZXF1ZXN0GkUuaW1wcm9iYWJsZS5zcGF0aWFsb3MucmVtb3Rl",
            "aW50ZXJhY3Rpb24udjFhbHBoYTEuRGVsZXRlRW50aXR5UmVzcG9uc2USmAEK",
            "C0VudGl0eVF1ZXJ5EkMuaW1wcm9iYWJsZS5zcGF0aWFsb3MucmVtb3RlaW50",
            "ZXJhY3Rpb24udjFhbHBoYTEuRW50aXR5UXVlcnlSZXF1ZXN0GkQuaW1wcm9i",
            "YWJsZS5zcGF0aWFsb3MucmVtb3RlaW50ZXJhY3Rpb24udjFhbHBoYTEuRW50",
            "aXR5UXVlcnlSZXNwb25zZUJ1WkFpbXByb2JhYmxlL3NwYXRpYWxvcy9yZW1v",
            "dGVpbnRlcmFjdGlvbi92MWFscGhhMTtyZW1vdGVpbnRlcmFjdGlvbqoCL0lt",
            "cHJvYmFibGUuU3BhdGlhbE9TLlJlbW90ZUludGVyYWN0aW9uLlYxQWxwaGEx",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Validator.ValidatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment.Parser, new[]{ "ProjectName", "DeploymentName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus.Parser, new[]{ "StatusCode", "Message" }, null, new[]{ typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus.Types.Code) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityCommandRequest), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityCommandRequest.Parser, new[]{ "Target", "WorkerType", "WorkerId", "ComponentTarget", "Binary" }, new[]{ "Payload" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityCommandRequest.Types.EntityCommandTarget), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityCommandRequest.Types.EntityCommandTarget.Parser, new[]{ "EntityId", "ComponentId" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityCommandResponse), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityCommandResponse.Parser, new[]{ "Status", "Binary" }, new[]{ "Response" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.ReserveEntityIdRequest), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.ReserveEntityIdRequest.Parser, new[]{ "Target", "NumberOfIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.ReserveEntityIdResponse), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.ReserveEntityIdResponse.Parser, new[]{ "Status", "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CreateEntityRequest), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CreateEntityRequest.Parser, new[]{ "Target", "EntityId", "Binary" }, new[]{ "EntityState" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CreateEntityResponse), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CreateEntityResponse.Parser, new[]{ "Status", "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.DeleteEntityRequest), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.DeleteEntityRequest.Parser, new[]{ "Target", "EntityId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.DeleteEntityResponse), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.DeleteEntityResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityQueryRequest), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityQueryRequest.Parser, new[]{ "Target", "Binary" }, new[]{ "Query" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityQueryResponse), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityQueryResponse.Parser, new[]{ "Status", "Result" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityQueryResponse.Types.Entity), global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityQueryResponse.Types.Entity.Parser, new[]{ "Id", "Binary" }, new[]{ "State" }, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Deployment : pb::IMessage<Deployment> {
    private static readonly pb::MessageParser<Deployment> _parser = new pb::MessageParser<Deployment>(() => new Deployment());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Deployment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.RemoteinteractionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deployment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deployment(Deployment other) : this() {
      projectName_ = other.projectName_;
      deploymentName_ = other.deploymentName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Deployment Clone() {
      return new Deployment(this);
    }

    /// <summary>Field number for the "project_name" field.</summary>
    public const int ProjectNameFieldNumber = 1;
    private string projectName_ = "";
    /// <summary>
    /// The project that the deployment targeted by the execution request belongs to.
    ///
    /// `project_name` must conform to the following regular expression: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectName {
      get { return projectName_; }
      set {
        projectName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deployment_name" field.</summary>
    public const int DeploymentNameFieldNumber = 2;
    private string deploymentName_ = "";
    /// <summary>
    /// The name of the deployment targeted by the execution request.
    ///
    /// `deployment_name` must conform to the regex: ^[a-z0-9_]{3,32}$
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeploymentName {
      get { return deploymentName_; }
      set {
        deploymentName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Deployment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Deployment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectName != other.ProjectName) return false;
      if (DeploymentName != other.DeploymentName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectName.Length != 0) hash ^= ProjectName.GetHashCode();
      if (DeploymentName.Length != 0) hash ^= DeploymentName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeploymentName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectName);
      }
      if (DeploymentName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeploymentName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Deployment other) {
      if (other == null) {
        return;
      }
      if (other.ProjectName.Length != 0) {
        ProjectName = other.ProjectName;
      }
      if (other.DeploymentName.Length != 0) {
        DeploymentName = other.DeploymentName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ProjectName = input.ReadString();
            break;
          }
          case 18: {
            DeploymentName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Additional status information for when executing an entity command.
  /// </summary>
  public sealed partial class CommandStatus : pb::IMessage<CommandStatus> {
    private static readonly pb::MessageParser<CommandStatus> _parser = new pb::MessageParser<CommandStatus>(() => new CommandStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.RemoteinteractionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandStatus(CommandStatus other) : this() {
      statusCode_ = other.statusCode_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandStatus Clone() {
      return new CommandStatus(this);
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus.Types.Code statusCode_ = 0;
    /// <summary>
    /// The status code telling us what the result of the command was.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus.Types.Code StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// An optional descriptive string explaining the status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatusCode);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusCode);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandStatus other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            statusCode_ = (global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus.Types.Code) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommandStatus message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Status codes that can be returned. They are identical to the ones
      /// supported by the Worker SDKs.
      /// </summary>
      public enum Code {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("OK")] Ok = 1,
        [pbr::OriginalName("UNIMPLEMENTED")] Unimplemented = 2,
        [pbr::OriginalName("INTERNAL_ERROR")] InternalError = 3,
        [pbr::OriginalName("DEADLINE_EXCEEDED")] DeadlineExceeded = 4,
        [pbr::OriginalName("TARGET_NOT_FOUND")] TargetNotFound = 6,
        [pbr::OriginalName("TARGET_AUTHORITY_LOST")] TargetAuthorityLost = 7,
        [pbr::OriginalName("PERMISSION_DENIED")] PermissionDenied = 8,
        [pbr::OriginalName("APPLICATION_ERROR")] ApplicationError = 9,
      }

    }
    #endregion

  }

  public sealed partial class EntityCommandRequest : pb::IMessage<EntityCommandRequest> {
    private static readonly pb::MessageParser<EntityCommandRequest> _parser = new pb::MessageParser<EntityCommandRequest>(() => new EntityCommandRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityCommandRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.RemoteinteractionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityCommandRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityCommandRequest(EntityCommandRequest other) : this() {
      Target = other.target_ != null ? other.Target.Clone() : null;
      workerType_ = other.workerType_;
      workerId_ = other.workerId_;
      ComponentTarget = other.componentTarget_ != null ? other.ComponentTarget.Clone() : null;
      switch (other.PayloadCase) {
        case PayloadOneofCase.Binary:
          Binary = other.Binary;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityCommandRequest Clone() {
      return new EntityCommandRequest(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment target_;
    /// <summary>
    /// Deployment targeted by the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "worker_type" field.</summary>
    public const int WorkerTypeFieldNumber = 2;
    private string workerType_ = "";
    /// <summary>
    /// Worker type that will be forwarded with the command to the handling worker. The specified
    /// string needs to correspond to a worker type defined in the deployment's bridge configurations.
    /// This allows for entity commands forwarded through the RIS to impersonate any known worker type.
    /// Specifying an unknown worker type will result in an error with an INVALID_ARGUMENT code.
    ///
    /// The regular expression used to validate types is synchronised with the one present in the
    /// WorkerType message of proto/improbable/platform/deployment/worker_flagz.proto.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkerType {
      get { return workerType_; }
      set {
        workerType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "worker_id" field.</summary>
    public const int WorkerIdFieldNumber = 3;
    private string workerId_ = "";
    /// <summary>
    /// Worker ID that will be forwarded with the command to the handling worker. This allows for
    /// entity commands forwarded through the RIS to impersonate any (in)existent worker.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkerId {
      get { return workerId_; }
      set {
        workerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "component_target" field.</summary>
    public const int ComponentTargetFieldNumber = 4;
    private global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityCommandRequest.Types.EntityCommandTarget componentTarget_;
    /// <summary>
    /// Target component of the entity command.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityCommandRequest.Types.EntityCommandTarget ComponentTarget {
      get { return componentTarget_; }
      set {
        componentTarget_ = value;
      }
    }

    /// <summary>Field number for the "binary" field.</summary>
    public const int BinaryFieldNumber = 5;
    /// <summary>
    /// Binary-encoded schema.improbable.EntityCommand message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Binary {
      get { return payloadCase_ == PayloadOneofCase.Binary ? (pb::ByteString) payload_ : pb::ByteString.Empty; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        payloadCase_ = PayloadOneofCase.Binary;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Binary = 5,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityCommandRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityCommandRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if (WorkerType != other.WorkerType) return false;
      if (WorkerId != other.WorkerId) return false;
      if (!object.Equals(ComponentTarget, other.ComponentTarget)) return false;
      if (Binary != other.Binary) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (target_ != null) hash ^= Target.GetHashCode();
      if (WorkerType.Length != 0) hash ^= WorkerType.GetHashCode();
      if (WorkerId.Length != 0) hash ^= WorkerId.GetHashCode();
      if (componentTarget_ != null) hash ^= ComponentTarget.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Binary) hash ^= Binary.GetHashCode();
      hash ^= (int) payloadCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (WorkerType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WorkerType);
      }
      if (WorkerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WorkerId);
      }
      if (componentTarget_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ComponentTarget);
      }
      if (payloadCase_ == PayloadOneofCase.Binary) {
        output.WriteRawTag(42);
        output.WriteBytes(Binary);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (WorkerType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkerType);
      }
      if (WorkerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkerId);
      }
      if (componentTarget_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComponentTarget);
      }
      if (payloadCase_ == PayloadOneofCase.Binary) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Binary);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityCommandRequest other) {
      if (other == null) {
        return;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.WorkerType.Length != 0) {
        WorkerType = other.WorkerType;
      }
      if (other.WorkerId.Length != 0) {
        WorkerId = other.WorkerId;
      }
      if (other.componentTarget_ != null) {
        if (componentTarget_ == null) {
          componentTarget_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityCommandRequest.Types.EntityCommandTarget();
        }
        ComponentTarget.MergeFrom(other.ComponentTarget);
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Binary:
          Binary = other.Binary;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (target_ == null) {
              target_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment();
            }
            input.ReadMessage(target_);
            break;
          }
          case 18: {
            WorkerType = input.ReadString();
            break;
          }
          case 26: {
            WorkerId = input.ReadString();
            break;
          }
          case 34: {
            if (componentTarget_ == null) {
              componentTarget_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityCommandRequest.Types.EntityCommandTarget();
            }
            input.ReadMessage(componentTarget_);
            break;
          }
          case 42: {
            Binary = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EntityCommandRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class EntityCommandTarget : pb::IMessage<EntityCommandTarget> {
        private static readonly pb::MessageParser<EntityCommandTarget> _parser = new pb::MessageParser<EntityCommandTarget>(() => new EntityCommandTarget());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EntityCommandTarget> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityCommandRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EntityCommandTarget() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EntityCommandTarget(EntityCommandTarget other) : this() {
          entityId_ = other.entityId_;
          componentId_ = other.componentId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EntityCommandTarget Clone() {
          return new EntityCommandTarget(this);
        }

        /// <summary>Field number for the "entity_id" field.</summary>
        public const int EntityIdFieldNumber = 1;
        private long entityId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EntityId {
          get { return entityId_; }
          set {
            entityId_ = value;
          }
        }

        /// <summary>Field number for the "component_id" field.</summary>
        public const int ComponentIdFieldNumber = 2;
        private int componentId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ComponentId {
          get { return componentId_; }
          set {
            componentId_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EntityCommandTarget);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EntityCommandTarget other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EntityId != other.EntityId) return false;
          if (ComponentId != other.ComponentId) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EntityId != 0L) hash ^= EntityId.GetHashCode();
          if (ComponentId != 0) hash ^= ComponentId.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EntityId != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(EntityId);
          }
          if (ComponentId != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(ComponentId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EntityId != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(EntityId);
          }
          if (ComponentId != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComponentId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EntityCommandTarget other) {
          if (other == null) {
            return;
          }
          if (other.EntityId != 0L) {
            EntityId = other.EntityId;
          }
          if (other.ComponentId != 0) {
            ComponentId = other.ComponentId;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                EntityId = input.ReadInt64();
                break;
              }
              case 16: {
                ComponentId = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class EntityCommandResponse : pb::IMessage<EntityCommandResponse> {
    private static readonly pb::MessageParser<EntityCommandResponse> _parser = new pb::MessageParser<EntityCommandResponse>(() => new EntityCommandResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityCommandResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.RemoteinteractionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityCommandResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityCommandResponse(EntityCommandResponse other) : this() {
      Status = other.status_ != null ? other.Status.Clone() : null;
      switch (other.ResponseCase) {
        case ResponseOneofCase.Binary:
          Binary = other.Binary;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityCommandResponse Clone() {
      return new EntityCommandResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus status_;
    /// <summary>
    /// Response status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "binary" field.</summary>
    public const int BinaryFieldNumber = 2;
    /// <summary>
    /// Binary-encoded schema.improbable.EntityCommand message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Binary {
      get { return responseCase_ == ResponseOneofCase.Binary ? (pb::ByteString) response_ : pb::ByteString.Empty; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.Binary;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      Binary = 2,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityCommandResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityCommandResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Binary != other.Binary) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (responseCase_ == ResponseOneofCase.Binary) hash ^= Binary.GetHashCode();
      hash ^= (int) responseCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (responseCase_ == ResponseOneofCase.Binary) {
        output.WriteRawTag(18);
        output.WriteBytes(Binary);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (responseCase_ == ResponseOneofCase.Binary) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Binary);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityCommandResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus();
        }
        Status.MergeFrom(other.Status);
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.Binary:
          Binary = other.Binary;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 18: {
            Binary = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReserveEntityIdRequest : pb::IMessage<ReserveEntityIdRequest> {
    private static readonly pb::MessageParser<ReserveEntityIdRequest> _parser = new pb::MessageParser<ReserveEntityIdRequest>(() => new ReserveEntityIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReserveEntityIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.RemoteinteractionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveEntityIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveEntityIdRequest(ReserveEntityIdRequest other) : this() {
      Target = other.target_ != null ? other.Target.Clone() : null;
      numberOfIds_ = other.numberOfIds_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveEntityIdRequest Clone() {
      return new ReserveEntityIdRequest(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment target_;
    /// <summary>
    /// Deployment targeted by the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "number_of_ids" field.</summary>
    public const int NumberOfIdsFieldNumber = 2;
    private int numberOfIds_;
    /// <summary>
    /// Optional number of entity IDs to reserve. If specified this allows for bulk reservations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfIds {
      get { return numberOfIds_; }
      set {
        numberOfIds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReserveEntityIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReserveEntityIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if (NumberOfIds != other.NumberOfIds) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (target_ != null) hash ^= Target.GetHashCode();
      if (NumberOfIds != 0) hash ^= NumberOfIds.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (NumberOfIds != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumberOfIds);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (NumberOfIds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfIds);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReserveEntityIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.NumberOfIds != 0) {
        NumberOfIds = other.NumberOfIds;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (target_ == null) {
              target_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment();
            }
            input.ReadMessage(target_);
            break;
          }
          case 16: {
            NumberOfIds = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReserveEntityIdResponse : pb::IMessage<ReserveEntityIdResponse> {
    private static readonly pb::MessageParser<ReserveEntityIdResponse> _parser = new pb::MessageParser<ReserveEntityIdResponse>(() => new ReserveEntityIdResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReserveEntityIdResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.RemoteinteractionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveEntityIdResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveEntityIdResponse(ReserveEntityIdResponse other) : this() {
      Status = other.status_ != null ? other.Status.Clone() : null;
      entityId_ = other.entityId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveEntityIdResponse Clone() {
      return new ReserveEntityIdResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus status_;
    /// <summary>
    /// Response status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 2;
    private long entityId_;
    /// <summary>
    /// The entity ID that has been reserved. If a bulk reservation request was made this will
    /// correspond to the first of a contiguous range of entity IDs of which the lenght is identical to
    /// the number of IDs that were requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReserveEntityIdResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReserveEntityIdResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (EntityId != other.EntityId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (EntityId != 0L) hash ^= EntityId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (EntityId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EntityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (EntityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EntityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReserveEntityIdResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.EntityId != 0L) {
        EntityId = other.EntityId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 16: {
            EntityId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateEntityRequest : pb::IMessage<CreateEntityRequest> {
    private static readonly pb::MessageParser<CreateEntityRequest> _parser = new pb::MessageParser<CreateEntityRequest>(() => new CreateEntityRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateEntityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.RemoteinteractionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateEntityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateEntityRequest(CreateEntityRequest other) : this() {
      Target = other.target_ != null ? other.Target.Clone() : null;
      entityId_ = other.entityId_;
      switch (other.EntityStateCase) {
        case EntityStateOneofCase.Binary:
          Binary = other.Binary;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateEntityRequest Clone() {
      return new CreateEntityRequest(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment target_;
    /// <summary>
    /// Deployment targeted by the requeset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 2;
    private long entityId_;
    /// <summary>
    /// Optional ID of the entity to create. If specified it needs to have been reserved before by a
    /// call to ReserveEntityId.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "binary" field.</summary>
    public const int BinaryFieldNumber = 3;
    /// <summary>
    /// Binary-encoded schema.improbable.EntityState message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Binary {
      get { return entityStateCase_ == EntityStateOneofCase.Binary ? (pb::ByteString) entityState_ : pb::ByteString.Empty; }
      set {
        entityState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        entityStateCase_ = EntityStateOneofCase.Binary;
      }
    }

    private object entityState_;
    /// <summary>Enum of possible cases for the "entity_state" oneof.</summary>
    public enum EntityStateOneofCase {
      None = 0,
      Binary = 3,
    }
    private EntityStateOneofCase entityStateCase_ = EntityStateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityStateOneofCase EntityStateCase {
      get { return entityStateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntityState() {
      entityStateCase_ = EntityStateOneofCase.None;
      entityState_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateEntityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateEntityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if (EntityId != other.EntityId) return false;
      if (Binary != other.Binary) return false;
      if (EntityStateCase != other.EntityStateCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (target_ != null) hash ^= Target.GetHashCode();
      if (EntityId != 0L) hash ^= EntityId.GetHashCode();
      if (entityStateCase_ == EntityStateOneofCase.Binary) hash ^= Binary.GetHashCode();
      hash ^= (int) entityStateCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (EntityId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EntityId);
      }
      if (entityStateCase_ == EntityStateOneofCase.Binary) {
        output.WriteRawTag(26);
        output.WriteBytes(Binary);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (EntityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EntityId);
      }
      if (entityStateCase_ == EntityStateOneofCase.Binary) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Binary);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateEntityRequest other) {
      if (other == null) {
        return;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.EntityId != 0L) {
        EntityId = other.EntityId;
      }
      switch (other.EntityStateCase) {
        case EntityStateOneofCase.Binary:
          Binary = other.Binary;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (target_ == null) {
              target_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment();
            }
            input.ReadMessage(target_);
            break;
          }
          case 16: {
            EntityId = input.ReadInt64();
            break;
          }
          case 26: {
            Binary = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateEntityResponse : pb::IMessage<CreateEntityResponse> {
    private static readonly pb::MessageParser<CreateEntityResponse> _parser = new pb::MessageParser<CreateEntityResponse>(() => new CreateEntityResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateEntityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.RemoteinteractionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateEntityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateEntityResponse(CreateEntityResponse other) : this() {
      Status = other.status_ != null ? other.Status.Clone() : null;
      entityId_ = other.entityId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateEntityResponse Clone() {
      return new CreateEntityResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus status_;
    /// <summary>
    /// Response status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 2;
    private long entityId_;
    /// <summary>
    /// ID of the newly created entity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateEntityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateEntityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (EntityId != other.EntityId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (EntityId != 0L) hash ^= EntityId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (EntityId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EntityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (EntityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EntityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateEntityResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.EntityId != 0L) {
        EntityId = other.EntityId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 16: {
            EntityId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteEntityRequest : pb::IMessage<DeleteEntityRequest> {
    private static readonly pb::MessageParser<DeleteEntityRequest> _parser = new pb::MessageParser<DeleteEntityRequest>(() => new DeleteEntityRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteEntityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.RemoteinteractionReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntityRequest(DeleteEntityRequest other) : this() {
      Target = other.target_ != null ? other.Target.Clone() : null;
      entityId_ = other.entityId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntityRequest Clone() {
      return new DeleteEntityRequest(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment target_;
    /// <summary>
    /// Deployment targeted by the requeset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "entity_id" field.</summary>
    public const int EntityIdFieldNumber = 2;
    private long entityId_;
    /// <summary>
    /// ID of the entity that should be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteEntityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteEntityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if (EntityId != other.EntityId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (target_ != null) hash ^= Target.GetHashCode();
      if (EntityId != 0L) hash ^= EntityId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (EntityId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EntityId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (EntityId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EntityId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteEntityRequest other) {
      if (other == null) {
        return;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.EntityId != 0L) {
        EntityId = other.EntityId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (target_ == null) {
              target_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment();
            }
            input.ReadMessage(target_);
            break;
          }
          case 16: {
            EntityId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteEntityResponse : pb::IMessage<DeleteEntityResponse> {
    private static readonly pb::MessageParser<DeleteEntityResponse> _parser = new pb::MessageParser<DeleteEntityResponse>(() => new DeleteEntityResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteEntityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.RemoteinteractionReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntityResponse(DeleteEntityResponse other) : this() {
      Status = other.status_ != null ? other.Status.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteEntityResponse Clone() {
      return new DeleteEntityResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus status_;
    /// <summary>
    /// Response status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteEntityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteEntityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteEntityResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus();
        }
        Status.MergeFrom(other.Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityQueryRequest : pb::IMessage<EntityQueryRequest> {
    private static readonly pb::MessageParser<EntityQueryRequest> _parser = new pb::MessageParser<EntityQueryRequest>(() => new EntityQueryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityQueryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.RemoteinteractionReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityQueryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityQueryRequest(EntityQueryRequest other) : this() {
      Target = other.target_ != null ? other.Target.Clone() : null;
      switch (other.QueryCase) {
        case QueryOneofCase.Binary:
          Binary = other.Binary;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityQueryRequest Clone() {
      return new EntityQueryRequest(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment target_;
    /// <summary>
    /// Deployment targeted by the requeset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "binary" field.</summary>
    public const int BinaryFieldNumber = 2;
    /// <summary>
    /// Binary-encoded schema.improbable.ComponentInterest.Query message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Binary {
      get { return queryCase_ == QueryOneofCase.Binary ? (pb::ByteString) query_ : pb::ByteString.Empty; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        queryCase_ = QueryOneofCase.Binary;
      }
    }

    private object query_;
    /// <summary>Enum of possible cases for the "query" oneof.</summary>
    public enum QueryOneofCase {
      None = 0,
      Binary = 2,
    }
    private QueryOneofCase queryCase_ = QueryOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryOneofCase QueryCase {
      get { return queryCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearQuery() {
      queryCase_ = QueryOneofCase.None;
      query_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityQueryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityQueryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if (Binary != other.Binary) return false;
      if (QueryCase != other.QueryCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (target_ != null) hash ^= Target.GetHashCode();
      if (queryCase_ == QueryOneofCase.Binary) hash ^= Binary.GetHashCode();
      hash ^= (int) queryCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (queryCase_ == QueryOneofCase.Binary) {
        output.WriteRawTag(18);
        output.WriteBytes(Binary);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (queryCase_ == QueryOneofCase.Binary) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Binary);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityQueryRequest other) {
      if (other == null) {
        return;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment();
        }
        Target.MergeFrom(other.Target);
      }
      switch (other.QueryCase) {
        case QueryOneofCase.Binary:
          Binary = other.Binary;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (target_ == null) {
              target_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.Deployment();
            }
            input.ReadMessage(target_);
            break;
          }
          case 18: {
            Binary = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EntityQueryResponse : pb::IMessage<EntityQueryResponse> {
    private static readonly pb::MessageParser<EntityQueryResponse> _parser = new pb::MessageParser<EntityQueryResponse>(() => new EntityQueryResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EntityQueryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.RemoteinteractionReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityQueryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityQueryResponse(EntityQueryResponse other) : this() {
      Status = other.status_ != null ? other.Status.Clone() : null;
      result_ = other.result_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EntityQueryResponse Clone() {
      return new EntityQueryResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus status_;
    /// <summary>
    /// Response status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityQueryResponse.Types.Entity> _repeated_result_codec
        = pb::FieldCodec.ForMessage(18, global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityQueryResponse.Types.Entity.Parser);
    private readonly pbc::RepeatedField<global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityQueryResponse.Types.Entity> result_ = new pbc::RepeatedField<global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityQueryResponse.Types.Entity>();
    /// <summary>
    /// Entities returned by the query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityQueryResponse.Types.Entity> Result {
      get { return result_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EntityQueryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EntityQueryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if(!result_.Equals(other.result_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= result_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      result_.WriteTo(output, _repeated_result_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += result_.CalculateSize(_repeated_result_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EntityQueryResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus();
        }
        Status.MergeFrom(other.Status);
      }
      result_.Add(other.result_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.CommandStatus();
            }
            input.ReadMessage(status_);
            break;
          }
          case 18: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EntityQueryResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Entity : pb::IMessage<Entity> {
        private static readonly pb::MessageParser<Entity> _parser = new pb::MessageParser<Entity>(() => new Entity());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entity> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Improbable.SpatialOS.RemoteInteraction.V1Alpha1.EntityQueryResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entity() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entity(Entity other) : this() {
          id_ = other.id_;
          switch (other.StateCase) {
            case StateOneofCase.Binary:
              Binary = other.Binary;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entity Clone() {
          return new Entity(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private long id_;
        /// <summary>
        /// ID of the entity.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "binary" field.</summary>
        public const int BinaryFieldNumber = 2;
        /// <summary>
        /// List of binary-encoded schema.improbable.EntityState messages.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Binary {
          get { return stateCase_ == StateOneofCase.Binary ? (pb::ByteString) state_ : pb::ByteString.Empty; }
          set {
            state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            stateCase_ = StateOneofCase.Binary;
          }
        }

        private object state_;
        /// <summary>Enum of possible cases for the "state" oneof.</summary>
        public enum StateOneofCase {
          None = 0,
          Binary = 2,
        }
        private StateOneofCase stateCase_ = StateOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StateOneofCase StateCase {
          get { return stateCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearState() {
          stateCase_ = StateOneofCase.None;
          state_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entity);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entity other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Binary != other.Binary) return false;
          if (StateCase != other.StateCase) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0L) hash ^= Id.GetHashCode();
          if (stateCase_ == StateOneofCase.Binary) hash ^= Binary.GetHashCode();
          hash ^= (int) stateCase_;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Id);
          }
          if (stateCase_ == StateOneofCase.Binary) {
            output.WriteRawTag(18);
            output.WriteBytes(Binary);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
          }
          if (stateCase_ == StateOneofCase.Binary) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Binary);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entity other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0L) {
            Id = other.Id;
          }
          switch (other.StateCase) {
            case StateOneofCase.Binary:
              Binary = other.Binary;
              break;
          }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Id = input.ReadInt64();
                break;
              }
              case 18: {
                Binary = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
